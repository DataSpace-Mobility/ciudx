/*
 * IUDX Resource Server APIs
 *
 * The Resource Server is IUDX's data store which allows publication, subscription and discovery of data. For search and discovery, it allows users to search through temporal, geo-based and attribute queries.  For publication and subscription, it allows users to use AMQP streaming protocol over TLS. It enables *Providers* of datasources to publish data as per the IUDX data descriptor. It enables *Consumers* of datasources to search and query for data using HTTPs APIs. It enables *Subscribers* a.k.a [Streaming Consumer] of datasources to stream data using AMQP streaming protocol over TLS.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package ciudx

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter(app *App) *gin.Engine {
	router := gin.Default()
	// router.Use(wrapper(""))
	for _, route := range buildRoutes(app) {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

func wrapper(token string) gin.HandlerFunc {
	return func(c *gin.Context) {
		// c.JSON(401, gin.H{
		// 	"error": "Unauthorised",
		// })
		// c.AbortWithError(401, errors.New("Unauthorised"))
	}
}

func buildRoutes(app *App) Routes {
	var routes = Routes{
		{
			"Index",
			http.MethodGet,
			"/",
			Index,
		},

		{
			"Deleteadaptor",
			http.MethodDelete,
			"/iudx/v1/adapter/:id",
			Deleteadaptor,
		},

		{
			"Getadaptordetails",
			http.MethodGet,
			"/iudx/v1/adapter/:id",
			Getadaptordetails,
		},

		{
			"Registeradapter",
			http.MethodPost,
			"/iudx/v1/adapter/register",
			Registeradapter,
		},

		{
			"Appendstreamingsubscription",
			http.MethodPatch,
			"/ngsi-ld/v1/subscription/:id",
			Appendstreamingsubscription,
		},

		{
			"Createastreamingsubscription",
			http.MethodPost,
			"/ngsi-ld/v1/subscription",
			Createastreamingsubscription,
		},

		{
			"Deleteasubscription",
			http.MethodDelete,
			"/ngsi-ld/v1/subscription/:id",
			Deleteasubscription,
		},

		{
			"Getstreamingsubscription",
			http.MethodGet,
			"/ngsi-ld/v1/subscription/:id",
			Getstreamingsubscription,
		},

		{
			"Updatestreamingsubscription",
			http.MethodPut,
			"/ngsi-ld/v1/subscription/:id",
			Updatestreamingsubscription,
		},

		{
			"Search",
			http.MethodGet,
			"/ngsi-ld/v1/entities",
			Search,
		},

		{
			"ComplexQuery",
			http.MethodPost,
			"/ngsi-ld/v1/entityOperations/query",
			ComplexQuery,
		},

		{
			"LatestEntities",
			http.MethodGet,
			"/ngsi-ld/v1/entities/:id",
			app.LatestEntities,
		},

		{
			"TemporalEntities",
			http.MethodGet,
			"/ngsi-ld/v1/temporal/entities",
			TemporalEntities,
		},
	}
	return routes
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}
